<?php
//$Id$

/**
 * @file 
 *   Xero Validation Test Framework
 *
 * The following tests have been created:
 *
 * - testContact
 * - testPayment
 * - testInvoice
 *
 *
 * The following class provides assertions to validate
 * various data that you want to pass into Xero.
 *
 * - assertValidContact
 *  - assertValidAddress
 *  - assertValidPhone
 * - assertValidPayment
 * - assertValidInvoice
 *  - assertValidLineItem
 * - assertValidCreditNote
 *  - assertValidLineItem
 *  
 */


/**
 * @class
 * Validation assertions for Xero data
 *
 */
class XeroValidateTest extends DrupalUnitTestCase {

  /**
   * Implementation of getInfo() method
   * @return array 
   */
  function getInfo() {
    return array(
      'name' => t('Xero Validation Tests'),
      'description' => t('Validate data structures returned by xero_make functions.'),
      'group' => t('Xero'),
    );
  }

  function setUp() {
    parent::setUp();

    $path = getcwd() . '/sites/all/modules/xero';
    $include = $path . '/xero.make.inc';

    if (file_exists($include)) {
      include_once($include);
      $this->assertTrue(TRUE, t('Included %file',  array('%file' => $include)));
    }
    else {
      $this->assertTrue(FALSE, t('Included %file', array('%file' => $include)));
      return;
    }
  }

  /**
   * Test a contact data structure.
   */
  function testContact() {    
    //Test a minimal contact
    $minimal = xero_make_contact('minimal');

    $this->assert($this->assertValidContact($minimal), t('xero_make_contact created a valid contact structure containing <em>minimal</em> elements..'));

    //Test all values with addresses and phones.
    $all = xero_make_contact('all', 1, 1);
    $all['Contact']['Addresses'][0]['Address']['AddressType'] = 'STREET';
    $all['Contact']['Phones'][0]['Phone']['PhoneType'] = 'DEFAULT';

    $this->assert($this->assertValidContact($all), t('xero_make_contact created a valid contact structure containing <em>all</em> elements.'));
  }
  
  /**
   * Test making a payment.
   */
  function testPayment() {
    $pay = xero_make_payment('minimal', 'id', 'id');
    $this->assert($this->assertValidPayment($pay), t('xero_make_payment created a valid payment structure with account and invoice id elements.'));

    $pay = xero_make_payment('minimal', 'number', 'code');
    $this->assert($this->assertValidPayment($pay), t('xero_make_payment created a valid payment structure with account code and invoice number elements.'));

  }

  /**
   * Test making invoices
   */
  function testInvoice() {
    $min = xero_make_invoice('minimal');
    $min['Invoice']['Type'] = 'ACCREC';
    $min['Invoice']['Contact']['Name'] = $this->randomName(32);

    $this->assert($this->assertValidInvoice($min), t('xero_make_invoice created a valid invoice structure with <em>minimal</em> elements.'));

    $rec = xero_make_invoice('recommended', 'name', 2);
    $rec['Invoice']['Contact']['Name'] = $this->randomName(32);
    $rec['Invoice']['Type'] = 'ACCREC';
    $rec['Invoice']['LineAmountTypes'] = 'NoTax';

    $this->assert($this->assertValidInvoice($rec), t('xero_make_invoice created a valid invoice structure with <em>recommended</em> elements.'));

    $all = xero_make_invoice('all', 'name', 2);
    $all['Invoice']['Contact']['Name'] = $this->randomName(32);
    $all['Invoice']['Type'] = 'ACCPAY';
    $all['Invoice']['LineAmountTypes'] = 'Exclusive';
    $all['Invoice']['Status'] = 'DRAFT';

    $this->assert($this->assertValidInvoice($all), t('xero_make_invoice created a valid invoice structure with <em>all</em> elements.'));
  }

  /**
   * Test valid credit notes.
   */
  function testCreditNote() {
    $min = xero_make_creditnote('minimal', 'name');
    $min['CreditNote']['Contact']['Name'] = $this->randomName(32);
    $min['CreditNote']['Type'] = 'ACCRECCREDIT';

    $this->assert($this->assertValidCreditNote($min), t('xero_make_creditnote created a valid credit note structure with <em>minimal</em> elements.'));

    $rec = xero_make_creditnote('recommended', 'name', 2);
    $rec['CreditNote']['Contact']['Name'] = $this->randomName(32);
    $rec['CreditNote']['Type'] = 'ACCRECCREDIT';
    $rec['CreditNote']['LineAmountTypes'] = 'NoTax';

    $this->assert($this->assertValidCreditNote($rec), t('xero_make_creditnote created a valid credit note structure with <em>recommended</em> elements.'));

    $all = xero_make_creditnote('all', 'name', 2);
    $all['CreditNote']['Contact']['Name'] = $this->randomName(32);
    $all['CreditNote']['Type'] = 'ACCRECCREDIT';
    $all['CreditNote']['LineAmountTypes'] = 'Exclusive';
    $all['CreditNote']['Status'] = 'DRAFT';

    $this->assert($this->assertValidCreditNote($all), t('xero_make_creditnote created a valid credit note structure with <em>all</em> elements.'));
  }

  /**
   * Assert a valid address data set
   * @param $address an address data set.
   * @return return value from assert()
   */
  function assertValidAddress($addresses = array()) {

    if (empty($addresses)) {
      return $this->assert(FALSE, t('Addresses must contain a valid array.'));
    }

    $lines = array(
      'AddressType' => 0,
      'AddressLine' => 0,
      'City' => 0,
      'Region' => 0,
      'PostalCode' => 0,
      'CountryCode' => 0,
    );

    //Loop through the address array
    foreach ($addresses as $address) {
      if (empty($address['Address'])) {
        return $this->assert(FALSE, t('Address element is not empty.'));
      }
      //Loop through each line in each address array.
      foreach ($address['Address'] as $line => $val) {

        if (substr($line, 0, 11) == 'AddressLine') {
          $num = substr($line, 11);
          if (!is_numeric($num)) {
            return $this->assert(FALSE, t('%num is an invalid Address Line number.', array('%num' => $num)));
          }
          if ($num > 4) {
            return $this->assert(FALSE, t('%line is not a valid Address Line.', array('%line' => $line)));
          }
        }
        else if ($line == 'AddressType' && (!($val == 'POBOX' || $val == 'STREET') || $lines[$line] > 0)) {
          return $this->assert(FALSE, t('Address type is either POBOX or STREET.'));
        }
        else if (!isset($lines[$line])) {
          return $this->assert(FALSE, t('Element, %element, is valid.', array('%element' => $line)));
        }
        else if ($line <> 'AddressLine' && $lines[$line] > 0) {
          return $this->assert(FALSE, t('Element, %element, occurs once.', array('%element' => $line)));
        }
        else {
          $lines[$line]++;
        }
      }
    }

    return $this->assert(TRUE, t('Found a valid Address data set.'));
  }

  /**
   * Assert valid phones data set
   * @param $phones a phones data set.
   * @return return value from assert()
   */
   function assertValidPhone($phones = array()) {

     if (empty($phones)) {
       return $this->assert(FALSE, t('Phones element is not empty.'));
     }

     $lines = array(
       'PhoneType' => 0,
       'PhoneNumber' => 0,
       'PhoneAreaCode' => 0,
       'PhoneCountryCode' => 0,
     );

     $types = array(
       'DEFAULT' => 0,
       'DDI' => 0,
       'MOBILE' => 0,
       'FAX' => 0,
     );

     foreach ($phones as $phone) {
       if (empty($phone)) {
         return $this->assert(FALSE, t('Phone element is not empty.'));
       }

       foreach ($phone['Phone'] as $line => $val) {
         if ($line == 'PhoneType' && (!isset($types[$val]) || $lines[$line] > 0)) {
           return $this->assert(FALSE, t('Phone number is a valid type: %type', array('%type' => $types[$val])));
         }
         else if(!isset($lines[$line]) || $lines[$line] > 0) {
           return $this->assert(FALSE, t('Element, %element, is valid.', array('%element' => $line)));
         }
         else {
           $lines[$line]++;
         }
       }
     }

     return $this->assert(TRUE, t('Found a valid Phones data set.'));
   }

   /**
    * Assert a valid Xero Contact data set
    * @param $contact One xero contact array with starting element Contact, not Contacts
    * @param return value from assert()
    */
   function assertValidContact($contact = array()) {

     if (!isset($contact['Contact'])) {
       return $this->assert(FALSE, t('Contacts element is not empty.'));
     }

     //Contact Name is the only required field
     if (!isset($contact['Contact']['Name'])) {
       return $this->assert(FALSE, t('Has required Name field.'));
     }

     //Assert valid addresses
     if (!empty($contact['Contact']['Addresses'])) {
       if (! $this->assertValidAddress($contact['Contact']['Addresses'])) {
         return $this->assert(FALSE, t('Contact has addresses that are valid.'));
       }
     }

     //Assert valid phones
     if (!empty($contact['Contact']['Phones'])) {
       if (! $this->assertValidPhone($contact['Contact']['Phones'])) {
         return $this->assert(FALSE, t('Contact has phones that are valid.'));
       }
     }

     //Assert valid Contact groups?
     //Assert valid Tax Type?
     //Assert valid Currency?

     $lines = array(
       'ContactStatus' => 0,
       'Name' => 0,
       'FirstName' => 0,
       'LastName' => 0,
       'EmailAddress' => 0,
       'Addresses' => 0,
       'Phones' => 0,
       'BankAccountDetails' => 0,
       'TaxNumber' => 0,
       'IsSupplier' => 0,
       'IsCustomer' => 0,
       'ContactGroups' => 0,
       'DefaultCurrency' => 0,
       'AccountsReceivableTaxType' => 0,
       'AccountsPayableTaxType' => 0,
     );

     //Only Name is required, see above, so we just want
     //invalid array keys.
     foreach ($contact['Contact'] as $line => $val) {
       if (!isset($lines[$line]) || $lines[$line] > 0) {
         return $this->assert(FALSE, t('Element, %element, is valid.', array('%element' => $line)));
       }
       else {
         $lines[$line]++;
       }
     }

     return $this->assert(TRUE, t('Found a valid Contact data set.'));
   }

   /**
    * Assert a valid line item
    * @param $items a line item data set.
    * @return return value from assert().
    */
   function assertValidLineItem($items = array()) {
     if (empty($items)) {
       return $this->assert(FALSE, t('LineItems contains a valid line item array.'));
     }

     $lines = array(
       'Description' => 0,
       'Quantity' => 0,
       'UnitAmount' => 0,
       'AccountCode' => 0,
       'TaxType' => 0,
       'TaxAmount' => 0,
       'LineAmount' => 0,
       'Tracking' => 0,
     );

     foreach ($items as $item) {
       if (empty($item['LineItem'])) {
         return $this->assert(FALSE, t('LineItem is not an empty array.'));
       }
       foreach ($item['LineItem'] as $line => $val) {
         if (!isset($lines[$line]) || $lines[$line] > count($items)) {
           return $this->assert(FALSE, t('%line is a valid type for line items.', array('%line' => $line)));
         }
         else {
           $lines[$line]++;
         }
       }
     }

     //Test optional tracking elements?

     return $this->assert(TRUE, t('Found a valid Line Item data set.'));
   }

   /**
    * Assert a valid payment data set
    * @param $payment a payment data set
    * @return return value from assert().
    */
   function assertValidPayment($payment = array()) {
     if (empty($payment['Payment'])) {
       return $this->assert(FALSE, t('Payments contains a valid Payment array.'));
     }

     $lines = array(
       'Invoice' => 0,
       'Account' => 0,
       'Date' => 0,
       'Amount' => 0,
     );

     foreach ($payment['Payment'] as $line => $val) {
       if (!isset($lines[$line]) || $lines[$line] > 0) {
         return $this->assert(FALSE, t('%line is a valid type for a payment.', array('%line' => $line)));
       }
       else {
         $lines[$line]++;
       }
     }

     if (!isset($payment['Payment']['Account']['AccountID']) && !isset($payment['Payment']['Account']['Code'])) {
       return $this->assert(FALSE, t('Payment has a valid account type.'));
     }

     if (!isset($payment['Payment']['Invoice']['InvoiceID']) && !isset($payment['Payment']['Invoice']['InvoiceNumber'])) {
       return $this->assert(FALSE, t('Payment has a valid invoice type.'));
     }

     return $this->assert(TRUE, t('Found a valid payment data set.'));
   }

   /**
    * Assert a valid Invoice data set.
    * @param $invoice an invoice data set.
    * @return return value from assert().
    */
   function assertValidInvoice($invoice = array()) {
     if (empty($invoice['Invoice'])) {
       return $this->assert(FALSE, t('Invoice contains a valid Invoice array.'));
     }

     //Type is mandatory
     $types = array('ACCREC' => 0, 'ACCPAY' => 0);
     if (empty($invoice['Invoice']['Type']) || !isset($types[$invoice['Invoice']['Type']])) {
       return $this->assert(FALSE, t('Invoice has a valid type: %type', array('%type' => empty($invoice['Invoice']['Type']) ? 'NULL' : $invoice['Invoice']['Type'])));
     }

     //Contact is mandatory
     if (empty($invoice['Invoice']['Contact']) || (empty($invoice['Invoice']['Contact']['Name']) && empty($invoice['Invoice']['Contact']['ContactID']))) {
       return $this->assert(FALSE, t('Invoice has a Contact associated with it.'));
     }

     $lines = array(
       'Type' => 0,
       'Contact' => 0,
       'Date' => 0,
       'DueDate' => 0,
       'LineAmountTypes' => 0,
       'LineItems' => 0,
       'InvoiceNumber' => 0,
       'Reference' => 0,
       'CurrencyCode' => 0,
       'Status' => 0,
       'SubTotal' => 0,
       'TotalTax' => 0,
       'Total' => 0,
     );

     foreach ($invoice['Invoice'] as $line => $val) {
       if (!isset($lines[$line]) || $lines[$line] > 0) {
         return $this->assert(FALSE, t('Element, %element, is valid.', array('%element' => $line)));
       }
       else {
         $lines[$line]++;
       }
     }

     //If we have line items then validate them.
     if (!empty($invoice['Invoice']['LineItems'])) {
       if(! $this->assertValidLineItem($invoice['Invoice']['LineItems'])) {
         return $this->assert(FALSE, t('Found a valid Invoice data set.'));
       }
     }

     //Assert LineAmountTypes one of three values.
     if (!empty($invoice['Invoice']['LineAmountTypes'])) {
       $type = $invoice['Invoice']['LineAmountTypes'];
       if (! ($type == 'Exclusive' || $type == 'Inclusive' || $type == 'NoTax')) {
         return $this->assert(FALSE, t('Line Amount Type, %type, is valid.', array('%type' => $type)));
       }
     }

     //Assert Status is DRAFT or SUBMITTED for posting.
     if (!empty($invoice['Invoice']['Status'])) {
       $status = $invoice['Invoice']['Status'];
       if (! ($status == 'DRAFT' || $status == 'SUBMITTED')) {
         return $this->assert(FALSE, t('Status, %status, is valid.', array('%status' => $status)));
       }
     }

     return $this->assert(TRUE, t('Found a valid Invoice data set.'));
   }

   /**
    * Assert a valid Credit Note data set.
    * @param $cn a credit note data set.
    * @return return value from assert().
    */
   function assertValidCreditNote($cn = array()) {
     if (empty($cn['CreditNote'])) {
       return $this->assert(FALSE, t('Credit Note contains a valid CreditNote array.'));
     }

     //Type is mandatory
     $types = array('ACCRECCREDIT' => 0, 'ACCPAYCREDIT' => 0);
     if (empty($cn['CreditNote']['Type']) || !isset($types[$cn['CreditNote']['Type']])) {
       return $this->assert(FALSE, t('Credit Note has a valid type: %type', array('%type' => empty($cn['CreditNote']['Type']) ? 'NULL' : $cn['CreditNote']['Type'])));
     }

     //Contact is mandatory
     if (empty($cn['CreditNote']['Contact']) || (empty($cn['CreditNote']['Contact']['Name']) && empty($cn['CreditNote']['Contact']['ContactID']))) {
       return $this->assert(FALSE, t('Credit Note has a Contact associated with it.'));
     }

     $lines = array(
       'Type' => 0,
       'Contact' => 0,
       'Date' => 0,
       'DueDate' => 0,
       'LineAmountTypes' => 0,
       'LineItems' => 0,
       'CreditNoteNumber' => 0,
       'Reference' => 0,
       'CurrencyCode' => 0,
       'Status' => 0,
       'SubTotal' => 0,
       'TotalTax' => 0,
       'Total' => 0,
     );

     foreach ($cn['CreditNote'] as $line => $val) {
       if (!isset($lines[$line]) || $lines[$line] > 0) {
         return $this->assert(FALSE, t('Element, %element, is valid.', array('%element' => $line)));
       }
       else {
         $lines[$line]++;
       }
     }

     //If we have line items then validate them.
     if (!empty($cn['CreditNote']['LineItems'])) {
       if(! $this->assertValidLineItem($cn['CreditNote']['LineItems'])) {
         return $this->assert(FALSE, t('Found a valid Credit Note data set.'));
       }
     }

     //Assert LineAmountTypes one of three values.
     if (!empty($cn['CreditNote']['LineAmountTypes'])) {
       $type = $cn['CreditNote']['LineAmountTypes'];
       if (! ($type == 'Exclusive' || $type == 'Inclusive' || $type == 'NoTax')) {
         return $this->assert(FALSE, t('Line Amount Type, %type, is valid.', array('%type' => $type)));
       }
     }

     //Assert Status is DRAFT or SUBMITTED for posting.
     if (!empty($cn['CreditNote']['Status'])) {
       $status = $cn['CreditNote']['Status'];
       if (! ($status == 'DRAFT' || $status == 'SUBMITTED')) {
         return $this->assert(FALSE, t('Status, %status, is valid.', array('%status' => $status)));
       }
     }

     return $this->assert(TRUE, t('Found a valid Credit Note data set.'));
   }
}

